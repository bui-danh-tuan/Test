import faiss
import pickle
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from sentence_transformers import SentenceTransformer
import numpy as np

# ƒê∆∞·ªùng d·∫´n
faiss_index_path = r"E:\Code\Master\BDT\Test\CloneData\faiss_has_accent.index"
faiss_ids_path = r"E:\Code\Master\BDT\Test\CloneData\faiss_ids.pkl"

# Load SentenceTransformer model (gi·ªëng model ƒë√£ d√πng ƒë·ªÉ t·∫°o index)
model = SentenceTransformer("sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")

# DB connection
def connect_db():
    engine = create_engine("mysql+pymysql://root:root@localhost/chatbot")
    return engine

def search_by_text(input_text):
    # Chuy·ªÉn vƒÉn b·∫£n th√†nh vector
    vec = model.encode([input_text])
    
    # Load FAISS index
    index = faiss.read_index(faiss_index_path)

    # Load danh s√°ch ID
    with open(faiss_ids_path, "rb") as f:
        id_list = pickle.load(f)

    # T√¨m top 5 vector g·∫ßn nh·∫•t
    D, I = index.search(np.array(vec), k=5)

    # K·∫øt n·ªëi DB
    engine = connect_db()
    Session = sessionmaker(bind=engine)
    session = Session()

    print(f"\nüîç Top 5 k·∫øt qu·∫£ g·∫ßn nh·∫•t v·ªõi chu·ªói: \"{input_text}\"")
    for rank, idx in enumerate(I[0]):
        id_matched = id_list[idx]
        distance = D[0][rank]

        result = session.execute(text(
            "SELECT main_title, content FROM uet_clear WHERE id = :id"
        ), {"id": id_matched}).fetchone()

        print(f"\n#{rank+1}: ID {id_matched} (index {idx}) | Distance: {distance:.4f}")
        if result:
            title, content = result
            print(f"- Ti√™u ƒë·ªÅ: {title}")
            print(f"- N·ªôi dung: {content[:200]}...")
        else:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y trong DB")

    session.close()

# V√≠ d·ª• s·ª≠ d·ª•ng
search_by_text("ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o ng√†nh c√¥ng ngh·ªá k·ªπ thu·∫≠t ƒëi·ªán t·ª≠ truy·ªÅn th√¥ng ch∆∞∆°ng tr√¨nh chu·∫©n qu·ªëc t·∫ø tr∆∞·ªùng ƒë·∫°i h·ªçc c√¥ng ngh·ªá ƒëhqghn univeristy of engineering and technology")
